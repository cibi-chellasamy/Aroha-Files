https://leetcode.com/studyplan/top-sql-50/
---------------------------------------------

Write a solution to find the percentage of immediate orders in the first orders of all customers, rounded to 2 decimal places.

select round(avg(case when order_date=customer_pref_delivery_date then 1 else 0 end)*100,2) as immediate_percentage from delivery 
where (customer_id,order_date) in
(select customer_id,
min(order_date)
from delivery group by customer_id);
-------------------------------------------------------------------------------

Write a solution to report the fraction of players that logged in again on the day after the day they first logged in, rounded to 2 decimal places. In other words, you need to count the number of players that logged in for at least two consecutive days starting from their first login date, then divide that number by the total number of players.

select round(count(a2.player_id) / count(a1.player_id), 2) 
as fraction 
from activity a1 
left outer join activity a2 
on a2.player_id = a1.player_id 
and a2.event_date = a1.event_date + 1 
where (a1.player_id, a1.event_date) in 
(select player_id, min(event_date) 
from activity 
group by player_id)
-------------------------------------------------------------------------------


Write a solution to calculate the number of unique subjects each teacher teaches in the university.

Return the result table in any order.

select  teacher_id, count(distinct subject_id) as cnt 
from teacher
group by teacher_id

-------------------------------------------------------------------------------

Write a solution to find the daily active user count for a period of 30 days ending 2019-07-27 inclusively. A user was active on someday if they made at least one activity on that day.

Return the result table in any order.


select to_char(activity_date, 'yyyy-mm-dd') as day,count(distinct user_id) as active_users 
from activity 
where activity_date between '2019-06-28' and '2019-07-27' 
group by activity_date;
-------------------------------------------------------------------------------
Write a solution to select the product id, year, quantity, and price for the first year of every product sold.

Return the resulting table in any order.

select qn.product_id, qn.first_year, qn.quantity, qn.price 
from (select product_id, year as first_year, quantity, price, 
rank() over(partition by product_id order by year) rn 
from sales
) qn
where qn.rn = 1;

-------------------------------------------------------------------------------
Write a solution to find all the classes that have at least five students.

Return the result table in any order.

select class from courses
group by class
having count(class) >=5;

-------------------------------------------------------------------------------

Write a solution that will, for each user, return the number of followers.

Return the result table ordered by user_id in ascending order.

select user_id,count(distinct follower_id) as followers_count
from followers 
group by user_id
order by user_id 

-------------------------------------------------------------------------------

A single number is a number that appeared only once in the MyNumbers table.

Find the largest single number. If there is no single number, report null.

select max(num) as num
from (select * from mynumbers  
group by num
having count(*) = 1 );

-------------------------------------------------------------------------------

Write a solution to report the customer ids from the Customer table that bought all the products in the Product table.

Return the result table in any order.

select customer_id
from customer
group by customer_id
having count(distinct product_key) = (select count(product_key) from product);

-------------------------------------------------------------------------------
Write a solution to report the ids and the names of all managers, the number of employees who report directly to them, and the average age of the reports rounded to the nearest integer.

Return the result table ordered by employee_id.


select e1.employee_id, e1.name, count(e2.employee_id) as reports_count,round(avg(e2.age),0) as average_age 
from employees e1 
inner join employees e2 
on e1.employee_id = e2.reports_to 
group by e1.employee_id, e1.name 
order by e1.employee_id;

-------------------------------------------------------------------------------
Write a solution to report all the employees with their primary department. For employees who belong to one department, report their only department.

select employee_id, department_id
from (select *, count(*) over(partition by employee_id) cnt from  Employee) t1
where (cnt=1) or (cnt<>1 and primary_flag='Y');

-------------------------------------------------------------------------------

Report for every three line segments whether they can form a triangle.

Return the result table in any order.

select x,y,z,
case when(x+y>z and x+z>y and y+z>x) then 'Yes' else 'No' end as 
triangle from triangle;

-------------------------------------------------------------------------------
Find all numbers that appear at least three times consecutively.
Return the result table in any order.

with cte as (select
num as n1,lead(num, 1) over (order by id) as n2,lead(num, 2) over (order by id) as n3
from logs)
select distinct n1 as ConsecutiveNums
from cte
where n1 = n2 and n1 = n3;






