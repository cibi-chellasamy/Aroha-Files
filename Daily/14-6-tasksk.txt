Python

Inventory Management System:

Scenario:

You are responsible for creating an inventory management system for a small retail store. The store sells various products, and you need to implement 

functionalities for adding new products, updating stock levels, processing sales, and generating reports.



inventory = {}

def add_product(p_id,name,price,quantity):
    if p_id in inventory:
        print(f"product id {p_id} already exists")
    else:
        inventory[p_id] = {"name":name,'Price':price,'Quantity':quantity}
        print(f"added product {name} with id {p_id} added")

def update_stock(p_id,quantity):
    if p_id in inventory:
        inventory[p_id]['Quantity'] += quantity
        print(f"Updated stock for {inventory[p_id]['name']}. New quantity: {inventory[p_id]['Quantity']}")
    else:
        print(f"Product ID {product_id} does not exist.")

def process_sale(p_id,quantity_sold):
    if p_id in inventory:
        if inventory[p_id]['Quantity'] >= quantity_sold:
            inventory[p_id]['Quantity'] -= quantity_sold
            total_price = inventory[p_id]['Price'] * quantity_sold
            print(f"Sold {quantity_sold} of {inventory[p_id]['name']}. Total price: {total_price:}")
        else:
            print(f"Not enough stock for {inventory[p_id]['name']}. Available quantity: {inventory[p_id]['Quantity']}")
    else:
        print(f"Product ID {p_id} does not exist.")

def generate_report():
    print("\nInventory Report:")
    print("ID\tname\t\tprice\tquantity")
    for p_id, details in inventory.items():
        print(f"{p_id}\t{details['name']}\t{details['Price']:}\t{details['Quantity']}")


add_product(1,'Maggi',5,20)

add_product(2,'Tide',4,200)

add_product(2,'Lays',10,100)

inventory

update_stock(1, 50)


process_sale(1,20)

add_product(3, "Orange", 40, 200)


inventory

process_sale(3,10)

inventory

generate_report()

------------------------------------------------------------------------------------------
SQL

SQL Queries (13-6-24)

1)

Select * from employees
offset 5 rows

2)

Select emp_name,emp_doj
where emp_doj = (select max(emp_doj) from employee)

3)

select emp_name,dept_name,min(salary) 
from employee
group by emp_name,dept_name

4)

select * from employees
offset (select count(*) - 4 from employees) rows

5)

select * from employees
fetch 1 rows only
union
select * from employees
offset(select count(*) -1 from employees);

6)

select * from employee
where mod(emp_id,2) = 1;

7)
select emp_name,salary
from(select emp_name,salary,dense_rank() over(order by salary desc) rnk
from employees)
where rnk = 5;

8)
select emp_name,emp_sal
from employee e1
where 2 = (select count(distinct e2.emp_sal) from employee 2
where e2.emp_sal>e1.emp_sal)

9)

select * from employee
fetch first 10 rows only

10)
select emp_name,emp_salr 
from(
select emp_name,emp_sal dense_rank()over(order by emp_sal desc)rnk
from employee)
where rnk < 6;


11)

with ord_emp as(
select e.* ,row_number() over (order by emp_id) rn
from employees)

select emp_id,emp_name
from ord_emp
where rn in (2,3,4,5,7,9)

12)

with ord_emp as(
select e.* ,row_number() over (order by emp_id) rn
from employees)
select * from ord_emp
where rn = 2

------------------------------------------------------------------------------------------


