Looping Statements:

# Use a break statement to exit a loop when a specific condition is met.

numbers = [1, 3, 5, 7, 9, 11]
threshold = 6

for num in numbers:
    if num > threshold:
        print(f"found a number greater than {threshold}: {num}")
        break
else:
    print('No num is greater than ',threshold)

--------------------------------------------------------------------------------
# Use a continue statement to skip even numbers in a loop.
numbers = [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]
for i in numbers:
    if i % 2 == 0:
        continue
    print(i)
---------------------------------------------------------------------------
# Implement a switch case statement for a simple calculator.

def add(x,y):
    return x + y 

def subtract(x,y):
    return x - y

def multiply (x,y):
    return x*y

def divide(x,y):
    if y == 0:
        return 'Error division by zero'
    return x/y

def calculator (operations,x,y):
    switcher = {
        'add': add,
        'subtract': subtract,
        'multiply': multiply,
        'divide': divide
    }
    func = switcher.get(operations,lambda x,y : 'Invalid operations')
    return func(x,y)

x = 10
y = 5

print(f"{x} + {y} = {calculator('add', x, y)}")
print(f"{x} - {y} = {calculator('subtract', x, y)}")
print(f"{x} * {y} = {calculator('multiply', x, y)}")
print(f"{x} / {y} = {calculator('divide', x, y)}")
---------------------------------------------------------------------------
# Check if a number is a perfect square using a loop and break statement.

def is_perfect_sq(num):
    if num < 0 :
        return False

    i = 1
    while True:
        square = i * i
        if square == num:
            return True
        elif square > num:
            break
        i = i + 1
    return False


number = 9
if is_perfect_sq(number):
    print(f"{number} is a perfect square.")
else:
    print(f"{number} is not a perfect square.")
---------------------------------------------------------------------------
# Create a menu-driven program using a while loop and switch case.

def add(x,y):
    return x + y 

def subtract(x,y):
    return x - y

def multiply (x,y):
    return x*y

def divide(x,y):
    if y == 0:
        return 'Error division by zero'
    return x/y

def menu():
    print("1. add")
    print("2. subtract")
    print("3. multiply")
    print("4. divide")
    print("5. exit")

def calculator():
    while True:
        menu()
        choice = input("Enter your choice (1-5): ")
        if choice == '5':
            print("exiting the program.")
            break
        
        num1 = float(input("Enter first number: "))
        num2 = float(input("Enter second number: "))

        if choice == '1':
            print(f"{num1} + {num2} = {add(num1, num2)}")
        elif choice == '2':
            print(f"{num1} - {num2} = {subtract(num1, num2)}")
        elif choice == '3':
            print(f"{num1} * {num2} = {multiply(num1, num2)}")
        elif choice == '4':
            print(f"{num1} / {num2} = {divide(num1, num2)}")
        else:
            print("invalid input.")

calculator()
---------------------------------------------------------------------------
# Implement a program to guess a number using random numbers and a loop.
import random

secret_number = random.randint(1,100)
attempts = 0
at = int(input('How many attemps do you want: '))
att = 0 
while attempts < at:
    guess = int(input('Enter a number '))
    attempts = attempts +1

    if guess < secret_number:
        print('low number try again')
    elif guess > secret_number:
        print('to high try again')

    else:
        print(f'you guessed he correct number{secret_number}')
        break

else:
    print('End of attempts')


---------------------------------------------------------------------------
# Print the prime numbers in a given range using a loop and continue statement.


def is_prime(num):
    if num <= 1:
        return False
    if num == 2:
        return True
    if num % 2 == 0:
        return False

    sqrt_num = int(num*0.5) +1
    for i in range (3,sqrt_num,2):
        if num % i == 0:
            return False
    return True

def prime_number(start,end):
    for num in range(start,end+1):
        if not is_prime(num):
            continue
        print(num,end = " ")

start = 3
end = 30
print (prime_number(start, end))
---------------------------------------------------------------------------
# Use pass statement to create an empty loop.
for i in range(5):
    pass
---------------------------------------------------------------------------
# Handle exceptions using try-except blocks for a user input program.
def divide_num():
    try:
        num1 = int(input('enter a number: '))
        num2 = int(input('enter a number: '))

        result = num1/num2
        print(f"{num1} / {num2} = {result}")

    except ValueError :
        print("error: Please enter valid numbers.")
    except ZeroDivisionError:
        print('error: cannot be divided by zero')
    except Exception as e:
        print(f"An error occurred: {e}")
divide_num()
---------------------------------------------------------------------------
Nested Loops and Patterns:


# Create a pattern of numbers using nested loops.

def number_patten(rows):
    for i in range(1,rows + 1):
        for j in range(1,i+1):
            print(j,end = " ")
        print()
rows = 5
print(number_patten(rows))
---------------------------------------------------------------------------
# Print a pyramid pattern using nested loops.
rows = 5

for i in range (1,rows + 1):
    for j in range(1,rows - i,+1):
        print(" ", end="")

    for k in range(1,2*i):
        print("*", end="")

    print()
    
---------------------------------------------------------------------------
# Generate a Pascal's triangle using nested loops.

def pascal_triangle(rows):
    for i in range(rows):
        for j in range(rows - i - 1):
            print(" " ,end = "")

        number = 1
        for j in range(i+1):
            print(number,end = " ")
            number = number * (i-j)//(j +1)

        print()

rows = 5
print(pascal_triangle(5))
---------------------------------------------------------------------------
# Implement a chessboard pattern using nested loops.

size = 8

for i in range(size):
    for j in range(size):
        if (i+j)%2 == 0:
            print('#',end = " ")
        else:
            print('',end = " ")
    print()
---------------------------------------------------------------------------
# Print a hollow square pattern using nested loops.
size = 8
for i in range(size):
    for j in range(size):
        if i == 0 or i == size - 1 or j == 0 or j == size -1:
            print('*',end = " ")
        else:
            print(" ",end = " ")
    print()
---------------------------------------------------------------------------
# Generate the following pattern using nested loops:
# 1
# 12
# 123
# 1234
rows = 5
for i in range (rows + 1):
    for j in range(1,i + 1):
        print(j,end = "")
    print()
        
---------------------------------------------------------------------------
# Print the following pattern using nested loops:
# 1
# 22
# 333
# 4444
rows = 5
for i in range (1,rows+1):
    for j in range(rows - i):
        print("",end = "")
    for k in range(i):
        print(i,end = "")
    print()
---------------------------------------------------------------------------
# Create an inverted right-angled triangle pattern using nested loops.
rows = 5
for i in range (rows,0,-1):
    for j in range( i):
        print("*",end = "")

    print()
---------------------------------------------------------------------------
# Print a pattern of alphabets using nested loops.
rows = 5
for i in range(rows):
    for j in range(i+i):
        print(chr(65 + j),end = "")
    print()
---------------------------------------------------------------------------
# Generate a rhombus pattern using nested loops.
size = 4
for i in range(size):
    for j in range(size - i - 1):
        print(" ",end = "")

    for k in range(size):
        print("*",end = " ")
    print()

    for i in range(size - 1):
        for j in range(i + 1):
            print(" ",end = " ")

        for k in range(size):
            print("*",end = " ")

        print()
---------------------------------------------------------------------------

